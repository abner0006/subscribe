name: 'main1 ☞ output/'

on:
  schedule:
    - cron: '10 17 * * *'  # UTC → 北京时间 1:10
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'

env:
  PYTHON_VERSION: '3.10'        
  RETAIN_DAYS: 7               
  HISTORY_DIR: 'history'        
  FILES_TO_ARCHIVE: >-
    output/full_channels.txt
    output/simple_channels.txt
    output/custom_channels.txt
    output/other_channels.txt
    output/sports.html

jobs:
  run_job:
    runs-on: ubuntu-latest
    permissions:
      contents: write  
      pull-requests: write  

    steps:
      - name: 拉取仓库代码
        uses: actions/checkout@v4
        with:
          ref: main

      # 新增：强制同步远程代码（应对仓库重建）
      - name: 强制同步远程代码
        run: git fetch --prune && git reset --hard origin/main

      - name: 安装Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 缓存依赖包
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install opencc-python-reimplemented pytz || { 
            echo "依赖安装失败，重试一次"; 
            pip install opencc-python-reimplemented pytz; 
          }

      - name: 同步代码并生成文件
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git reset --hard HEAD
          git pull origin main --rebase || { 
            echo "变基冲突，用远程覆盖本地";
            git rebase --abort;
            git pull origin main --force;
          }
          python main1.py || { 
            echo "首次生成失败，重试"; 
            python main1.py || { exit 1; } 
          }

      - name: 校验文件完整性
        run: |
          critical_files=("output/full_channels.txt" "output/custom_channels.txt")
          for file in "${critical_files[@]}"; do
            if [ ! -s "$file" ]; then
              echo "错误：$file 异常，终止"; exit 1;
            fi
          done
          if ! grep -q "🌐央视频道,#genre#" "output/full_channels.txt"; then
            echo "错误：内容缺失，终止"; exit 1;
          fi

      - name: 清理历史归档
        run: |
          mkdir -p ${{ env.HISTORY_DIR }}
          find ${{ env.HISTORY_DIR }} -name "*.zip" -type f -mtime +${{ env.RETAIN_DAYS }} -delete

      - name: 生成今日归档
        run: |
          if ! git diff --quiet ${{ env.FILES_TO_ARCHIVE }}; then
            current_datetime=$(date +"%Y%m%d_%H%M%S")
            zip_filename="${{ env.HISTORY_DIR }}/${current_datetime}_archive.zip"
            zip -j "${zip_filename}" ${{ env.FILES_TO_ARCHIVE }}
            git add "${zip_filename}"
          fi

      # 优化：只提交指定文件，强制推送，不处理复杂合并
      - name: 提交并推送更改
        run: |
          # 只提交需要更新的文件（精确指定路径）
          git add output/full_channels.txt output/full_channels.m3u \
                  output/simple_channels.txt output/simple_channels.m3u \
                  output/custom_channels.txt output/custom_channels.m3u \
                  output/other_channels.txt output/sports.html \
                  ${{ env.HISTORY_DIR }}/
          # 提交变更（无变更时不报错）
          git commit -m ":tada: 自动更新 $(date +'%Y%m%d')" || true
          # 强制推送，确保本地生成的文件覆盖远程对应文件
          git push origin main --force

      - name: 保存生成的文件
        uses: actions/upload-artifact@v4
        with:
          name: generated-files
          path: |
            output/full_channels.txt
            output/full_channels.m3u
            output/simple_channels.txt
            output/simple_channels.m3u
            output/custom_channels.txt
            output/custom_channels.m3u
            output/other_channels.txt
            output/sports.html
            ${{ env.HISTORY_DIR }}/*.zip
